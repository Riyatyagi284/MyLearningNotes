## MongoDB operators used for batch fetching :

$in: Match any value in an array (most common for batch fetching by IDs).
$or: Match documents that meet at least one condition.
$and: Match documents that meet all conditions.
$elemMatch: Match based on an array field with nested conditions.
$all: Match documents where an array contains all specified values.
$gte, $lte, $gt, $lt: Match based on numerical or date ranges.
$nin: Match documents where the field value is not in an array of values.
$exists: Match documents where a field either exists or does not.
$regex: Match documents where a string field matches a regular expression.
$text: Perform a full-text search on documents.

LETS DISCUSS ALL T=OF THEM ONE BY ONE

1) 1. $in Operator:  Fetches documents where the field's value matches ANY VALUE IN ARRAY OF VALUES.
useCase: when you have a list of specific IDs

example: const products = await Product.find({ _id: { $in: [id1, id2, id3] } });

2. $or Operator: --> Fetches documents that match at least one of several conditions.
                 --> It allows you to specify multiple conditions and will return documents that match any of those conditions.

example: const products = await Product.find({
  $or: [
    { category: 'Electronics' },
    { price: { $gt: 1000 } }
  ]
});

3. $and Operator: Fetches documents that match all of several conditions.
useCase: need to match multiple criteria simultaneously (e.g., fetching products that belong to a certain category and are within a certain price range).

example: const products = await Product.find({
  $and: [
    { category: 'Electronics' },
    { price: { $gt: 1000 } }
  ]
});


In MongoDB, batch fetching typically involves retrieving multiple records in a single query using a variety of operators. While $in is one of the most commonly used operators for this purpose, MongoDB provides several other operators that can be used to perform batch queries based on different conditions.

Here are some of the key MongoDB operators used for batch fetching:

1. $in Operator
Description: Fetches documents where the field's value matches any value in an array of values.

Use Case: Most commonly used for batch fetching when you have a list of specific IDs or values.

js
Copy code
const products = await Product.find({ _id: { $in: [id1, id2, id3] } });
2. $or Operator
Description: Fetches documents that match at least one of several conditions. It allows you to specify multiple conditions and will return documents that match any of those conditions.

Use Case: Used when you want to batch fetch documents based on multiple conditions (e.g., fetching products by different conditions such as price or category).

js
Copy code
const products = await Product.find({
  $or: [
    { category: 'Electronics' },
    { price: { $gt: 1000 } }
  ]
});
3. $and Operator
Description: Fetches documents that match all of several conditions.

Use Case: This is useful for complex batch queries that need to match multiple criteria simultaneously (e.g., fetching products that belong to a certain category and are within a certain price range).

js
Copy code
const products = await Product.find({
  $and: [
    { category: 'Electronics' },
    { price: { $gt: 1000 } }
  ]
});
4. $elemMatch Operator: Fetches documents where a specific condition is met within an array field.
useCase: when querying an array field in your document, such as batch fetching documents that contain certain conditions within nested arrays.

example: const orders = await Order.find({
  cartItems: { $elemMatch: { productId: { $in: [id1, id2] } } }
});

5. $all Operator: Fetches documents where an array field contains all the specified values.

example: const orders = await Order.find({
  tags: { $all: ['electronics', 'mobile'] }
});

6. $gte, $lte, $gt, $lt Operators: Fetches documents where the field value is greater than, less than, or within a certain range.

example: const products = await Product.find({
  price: { $gte: 100, $lte: 1000 }
});

7. $nin Operator: Fetches documents where the fieldâ€™s value does not match any value in the specified array.

example: const products = await Product.find({ _id: { $nin: [id1, id2] } });

8. $exists Operator: Fetches documents where a specific field exists or does not exist.

example: const products = await Product.find({
  discount: { $exists: true }
});

9. $regex Operator: Fetches documents where a string field matches a given regular expression.

example: const products = await Product.find({
  name: { $regex: /phone/i }
});

10. $text Operator: Fetches documents that match a text search query, typically when an index has been set up for full-text search.

example: const products = await Product.find({
  $text: { $search: "laptop mobile" }
});
